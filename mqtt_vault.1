.\" Automatically generated by Pandoc 2.19.2
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "mqtt_vault" "1" "" "Version 1.0" "MQTT Vault Manual"
.hy
.SH NAME
.PP
MQTT Vault - JSON database controlled via MQTT
.SH SYNOPSIS
.PP
mqtt_vault [\f[I]-s config-file\f[R]] [\f[I]OPTIONS\f[R]]
.SH DESCRIPTION
.PP
This program stores and recalls JSON data via MQTT.
It can be used to create virtual IoT devices that retain their state
when disconnected.
.SH OPTIONS
.PP
Most options can also be controlled via environment variables.
.SS -a, --address \f[I][string]\f[R]
.PP
IP/hostname and port of MQTT broker.
.PP
Default: \f[I]tcp://localhost:1883\f[R]
.PP
Environment variable: \f[B]MQTTV_ADDRESS\f[R]
.SS -c, --ca-file \f[I][string]\f[R]
.PP
Path to CA file (Secure connections only).
.PP
Default: \f[I]none\f[R]
.PP
Environment variable: \f[B]MQTTV_CAFILE\f[R]
.SS -d, --db-root \f[I][string]\f[R]
.PP
Path to the database root.
.PP
Default: \f[I]db\f[R]
.PP
Environment variable: \f[B]MQTTV_DBROOT\f[R]
.SS -e, --cert-file \f[I][string]\f[R]
.PP
Path to client certificate (Secure connections only).
.PP
This may be a combined cert and key, or it may just be the cert.
.PP
Default: \f[I]none\f[R]
.PP
Environment variable: \f[B]MQTTV_CERTFILE\f[R]
.SS -f, --file-crypt-key \f[I][string]\f[R]
.PP
Password to encrypt the JSON files with.
If this is \f[I]none\f[R], the database will not be encrypted.
Setting this to \f[I]STDIN\f[R] will cause an interactive prompt to
appear.
.PP
MQTT Vault cannot make use of encrypted and unencrypted files at the
same time, but they will not overwrite each other if placed in the same
\f[B]--db-root\f[R].
However, using \f[B]--change-crypt-key\f[R] to add or remove encryption
will overwrite the files it converts.
.PP
Max length is 32 characters.
.PP
Default: \f[I]none\f[R]
.PP
Environment variable: \f[B]MQTTV_FILECRYPTKEY\f[R]
.SS --change-crypt-key
.PP
Allows an encryption key to be changed, added, or removed.
Ignores all other arguments except \f[B]--db-root\f[R] and
\f[B]--file-crypt-key\f[R].
.PP
This will overwrite the current database if there are no errors.
.PP
An interactive prompt will appear to collect the necessary information.
If \f[B]--file-crypt-key\f[R] is specified, it will be used as the
current key and the user will only have to enter a new key.
After the data is converted, the program will halt.
.SS -i, --client-id \f[I][string]\f[R]
.PP
MQTT client ID.
.PP
Default: \f[I]random value\f[R]
.PP
Environment variable: \f[B]MQTTV_CLIENTID\f[R]
.SS -k, --key-file \f[I][string]\f[R]
.PP
Path to client certificate\[cq]s private key (Secure connections Only).
.PP
Do not define this field if using a combined cert and key for
\f[B]--cert-file\f[R].
.PP
Default: \f[I]none\f[R]
.PP
Environment variable: \f[B]MQTTV_KEYFILE\f[R]
.SS -m, --max-retries \f[I][integer]\f[R]
.PP
Max number of reconnect attempts to make if the broker connection is
lost.
.PP
Values below zero are interpreted as infinite retries.
.PP
Default: \f[I]-1\f[R]
.PP
Environment variable: \f[B]MQTTV_MAXRETRIES\f[R]
.SS -p, --password \f[I][string]\f[R]
.PP
MQTT user\[cq]s password.
.PP
Default: \f[I]none\f[R]
.PP
Environment variable: \f[B]MQTTV_PASSWORD\f[R]
.SS -r, --retry-interval \f[I][integer]\f[R]
.PP
Number of seconds to wait before attempting to reconnect to the broker.
.PP
Default: \f[I]30\f[R]
.PP
Environment variable: \f[B]MQTTV_RETRYINTERVAL\f[R]
.SS -s, --settings \f[I][string]\f[R]
.PP
Path to configuration file.
.PP
If other command line arguments are included, they will override the
configuration file.
.PP
Default: \f[I]none\f[R]
.SS -S, --silent
.PP
Suppress error messages.
.PP
Combine with \f[B]--verbose\f[R] to suppress errors but show info.
.PP
Environment variable: \f[B]MQTTV_SILENT\f[R] =
[\f[I]true\f[R]/\f[I]1\f[R]/\f[I]Y\f[R] or
\f[I]false\f[R]/\f[I]0\f[R]/\f[I]N\f[R]]
.SS -t, --topic-root \f[I][string]\f[R]
.PP
Root topic that MQTT Vault will use to send & receive messages.
.PP
\f[I]/get\f[R] and \f[I]/set\f[R] will be appended to this.
.PP
Default: \f[I]mqtt_vault\f[R]
.PP
Environment variable: \f[B]MQTTV_TOPICROOT\f[R]
.SS -u, --user \f[I][string]\f[R]
.PP
MQTT user.
.PP
Default: \f[I]none\f[R]
.PP
Environment variable: \f[B]MQTTV_USER\f[R]
.SS -v3
.PP
Connect with MQTT v3 instead of v5.
.PP
MQTT v3 has a limited featureset and isn\[cq]t recommended.
.PP
Environment variable: \f[B]MQTTV_V5\f[R] =
[\f[I]false\f[R]/\f[I]0\f[R]/\f[I]N\f[R]]
.SS -v5
.PP
Connect with MQTT v5.
This is the default behavior.
.PP
Environment variable: \f[B]MQTTV_V5\f[R] =
[\f[I]true\f[R]/\f[I]1\f[R]/\f[I]Y\f[R]]
.SS -V, --verbose
.PP
Show informative messages.
.PP
Combine with \f[B]--silent\f[R] to suppress errors but show info.
.PP
Environment variable: \f[B]MQTTV_VERBOSE\f[R] =
[\f[I]true\f[R]/\f[I]1\f[R]/\f[I]Y\f[R] or
\f[I]false\f[R]/\f[I]0\f[R]/\f[I]N\f[R]]
.SS -v, --version
.PP
Output the version number and exit.
.SH EXAMPLES
.SS Assumptions Used Below
.IP \[bu] 2
\f[B]--db-root\f[R] is the \f[I]db\f[R] directory.
.IP \[bu] 2
\f[B]--topic-root\f[R] is \f[I]mqtt_vault\f[R], with the full
\f[I]/get\f[R] and \f[I]/set\f[R] topics being \f[I]mqtt_vault/get\f[R]
and \f[I]mqtt_vault/set\f[R].
.SS Basics of Topics and Files
.IP \[bu] 2
Data sent to \f[I]mqtt_vault/set/data\f[R] will be written to
\f[I]db/data.json\f[R].
.IP \[bu] 2
Data sent to \f[I]mqtt_vault/set/data/item\f[R] will be written to
\f[I]db/data/item.json\f[R].
.IP \[bu] 2
Data sent to \f[I]mqtt_vault/set/data\f[R] will be broadcast to
\f[I]mqtt_vault/get/data\f[R] after it is saved to disk.
.IP \[bu] 2
Querying the \f[I]/get\f[R] topic with an MQTTv5 response topic will
cause the value on disk to be read and sent to that response topic.
.IP \[bu] 2
Querying the \f[I]/get\f[R] topic without an MQTTv5 response topic will
cause the value on disk to be rebroadcast on the \f[I]/get\f[R] topic.
.SS Example 1 - /set triggers broadcast to /get
.IP "1." 3
Clients A and B subscribe to \f[I]mqtt_vault/get/data\f[R]
.IP "2." 3
Client C sends MQTT message \f[I]\[lq]value\[rq]\f[R] to
\f[I]mqtt_vault/set/data\f[R]
.IP "3." 3
MQTT Vault creates \f[I]db/data.json\f[R] with the value
\f[I]\[lq]value\[rq]\f[R]
.IP "4." 3
MQTT Vault broadcasts \f[I]\[lq]value\[rq]\f[R] to
\f[I]mqtt_vault/get/data\f[R]
.IP "5." 3
A and B both receive \f[I]\[lq]value\[rq]\f[R] on
\f[I]mqtt_vault/get/data\f[R]
.SS Example 2 - /get with a response topic
.IP "1." 3
File \f[I]db/data.json\f[R] contains the value \f[I]\[lq]value\[rq]\f[R]
.IP "2." 3
Clients A and B subscribe to \f[I]mqtt_vault/get/data\f[R]
.IP "3." 3
Client B sends MQTT message \f[I]data\f[R] to \f[I]mqtt_vault/get\f[R]
with response topic \f[I]resp/topic\f[R]
.IP "4." 3
MQTT Vault sends the \f[I]\[lq]value\[rq]\f[R] from
\f[I]db/data.json\f[R] to \f[I]resp/topic\f[R]
.IP "5." 3
Client B receives \f[I]\[lq]value\[rq]\f[R] on \f[I]resp/topic\f[R]
.IP "6." 3
Client A receives nothing
.SS Example 3 - /get without a response topic
.IP "1." 3
File \f[I]db/data.json\f[R] contains the value \f[I]\[lq]value\[rq]\f[R]
.IP "2." 3
Clients A and B subscribe to \f[I]mqtt_vault/get/data\f[R]
.IP "3." 3
Client B sends MQTT message \f[I]data\f[R] to \f[I]mqtt_vault/get\f[R]
.IP "4." 3
MQTT Vault sends the \f[I]\[lq]value\[rq]\f[R] from
\f[I]db/data.json\f[R] to \f[I]mqtt_vault/get/data\f[R]
.IP "5." 3
Clients A and B receive \f[I]\[lq]value\[rq]\f[R] on
\f[I]mqtt_vault/get/data\f[R]
.SH AUTHOR
.PP
Bruce Patterson - <https://bpatterson.dev>
.SH COPYRIGHT
.PP
\[co]\[uFE0F] Bruce Patterson 2022
.PP
This program\[cq]s source code is subject to the terms of the Mozilla
Public License, v.
2.0.
If a copy of the MPL was not distributed with the program, You can
obtain one at http://mozilla.org/MPL/2.0/.
